* fixing collision detection - getting stuck



* is bounding collision accurate enough for texture?

* does visibility still work on scaled sprites??

------------------------



* bullets collide with obstackles - not the source player!!

* bullets also visibility object? AND networking object




* put collision in own class, dont mess up GameScene more



--- Structure ---
Player
* ControllableGameobject - for this player
* NetworkGameObject - for other players
* VisibilityGameObject - for players on other teams

Projectile
* projectileGameObject - for this player
* NetworkGameObject - for other players
* VisibilityGameObject - for players on other teams


StaticGameObject (like tables, boxes)
* VisibilityGameObject - for all

TerrainGameObject (like walls, rooms)
*





GameObject
* Render: SightVisibility / FullyVisible - updates render logic
* Position: StaticPosition / NetworkPosition / ControlledPosition - updates object position
* Collision: CollisionEnable, NoCollision - updates collision data

















//var shape = new Shape();
		//shape.graphics.ellipse(100, 100, 400, 300);
		//shape.graphics.fillPattern(new GraphicsPattern.noRepeat(backgroundTex.renderTextureQuad));
		//stage.addChild(shape);


http://ncase.me/sight-and-light/


Game object properties:
* animate - has moving animation
* collision - can collide with
*




Types:
* Table, Chair, Walls - collision, not animation
* Bullets - collision, animation
* Player - collision, animation
* Network players - collision, animation
* Drones

-------

Collision:

* check if player is in map bounds

* run for each dimension - can move along walls
> cannot do this for bullets!!
	- only player movement



* need constant step for collision check

* Step = 2 (ceil from current position)






Game stage:
* Player object
* Bullets
* Network object (other players, AI drones?, other player bullets)
* Map (stationary objects)

Components:
* Keyboard / Mouse
* Socket

Loop:
* Input player controls (move, shoot)
	- check collision detection for stationary objects
* Check bullet collision detection
---------------

Structure:
Main - starting up loop, setting up basics
	GameLoop - overarching components: mouse, keyboard, socket, ..
		GameScene - in-game match objects and components
			GameMap -
		Settings screen

Flow:
Main Menu
	Settings
		Sound
		Fullscreen (on/off)
		Resolution
	Join Game


* render bullets over network (each player notifies server of own bullets)
* server update player positions per step, not everyone it receives

* sending packets as series of bytes (not text)

* does it work on gearhost with unsecure WebSocket?

* 2D camera moving with the player



Client:
* Render list of objects set by server, server ignore self?:
	{ID}


Sub protocol (Server => Client):
0 = Assign user id
1 = send player list { [hte563, 375, 192], [hfe568, 315, 102], .... }
2 = player joined
3 = player left


protocol (Client => Server)
0 = updated position


-----


IceBlizz6
FaerieFrost912

- amazon: RedArrow172


----

------------------------------------------------



  //html.querySelector('#text').text = stage.sourceWidth.toString();

  //window.onKeyDown.listen((event) {
  //  canvas.requestFullscreen();
  //});

  stage.onKeyDown.listen((event) {
    //
  });
.......................................................------------------------------------





	void updateRemoveNetwork(String removeId) {
		var obj = networkSprites[removeId];
		stage.juggler.remove(obj);
		stage.removeChild(obj);

		networkSprites[removeId] = null;
	}

	void updateNetwork() {
		for (PlayerData playerData in gameSocket.players.values) {
			if (networkSprites[playerData.id] == null) {
				createNetworkPlayer(playerData.id);
			}

			networkSprites[playerData.id].reportX = playerData.x;
			networkSprites[playerData.id].reportY = playerData.y;
			networkSprites[playerData.id].reportRotation = playerData.rotation;
		}
	}

	void createNetworkPlayer(String id) {
		NetworkObject networkPlayerSprite = new NetworkObject();
		networkPlayerSprite.addChild(new Bitmap(shipSprite));
		networkPlayerSprite.pivotX = networkPlayerSprite.width / 2;
		networkPlayerSprite.pivotY = networkPlayerSprite.height / 2;
		networkPlayerSprite.scaleX = 0.6;
		networkPlayerSprite.scaleY = 0.6;

		networkSprites[id] = networkPlayerSprite;

		stage.addChild(networkPlayerSprite);
		stage.juggler.add(networkPlayerSprite);
	}

	void createLaser(Vector origin, Vector direction) {
		Sprite laserSprite = new Sprite();
		laserSprite.addChild(new Bitmap(laserData));


		laserSprite.pivotX = laserSprite.width / 2;
		laserSprite.pivotY = laserSprite.height / 2;
		laserSprite.scaleX = 2.0;
		laserSprite.scaleY = 2.0;
		laserSprite.rotation = direction.degrees/180 * PI + PI/2;

		laserSprite.x = origin.x;
		laserSprite.y = origin.y;

		laserShots.add(laserSprite);
		shotDirections.add(direction);
		stage.addChild(laserSprite);
	}

	@override
	bool advanceTime(num time) {
		// TODO: implement advanceTime
		num speed = 20.0;

		for (int i = 0;i<laserShots.length;i++) {
			laserShots[i].x += shotDirections[i].scale(speed).x;
			laserShots[i].y += shotDirections[i].scale(speed).y;
		}



		num distanceRot = (currentRotValue - rotValue).abs();
		if (distanceRot > PI) {
			if (rotValue < currentRotValue) {
				currentRotValue -= 2* PI;
			} else {
				currentRotValue += 2 * PI;
			}
		}




		//html.querySelector('#text').text = dir.degrees.toString();

		num accelerationSpeed = 15000.0;



		num dirX = Math.cos(playerObject.rotation + PI/2);
		num dirY = Math.sin(playerObject.rotation + PI/2);

		if (mouseDevice.isPressed(0)) {
			Vector shotDirection = new Vector(dirX, dirY);
			createLaser(playerObject.position + shotDirection.scale(playerObject.height/4), shotDirection);

		}


		//playerObject.update(time);
		playerObject.advanceTime(time);

		num posX = cycleRange(playerObject.position.x, 0, 1280);
		num posY = cycleRange(playerObject.position.y, 0, 720);

		//Math.
		playerObject.x = posX;
		playerObject.y = posY;
		playerObject.position = new Vector(posX, posY);

		// send data to server
		gameSocket.updatePosition(posX, posY, playerObject.rotation);





		//html.querySelector('#text').text = gamepad.StickValue(0, 0).toString() + ", " + gamepad.StickValue(0, 1).toString();


		//var tween = stage.juggler.addTween(spaceshipSprite, 0.0);
		//spaceshipController.animate.x.to(spaceshipSprite.x + moveX);
		//spaceshipController.animate.y.to(spaceshipSprite.y + moveY);


		return true;
	}

	num cycleRange(num value, num min, num max) {
		num val = value;
		num range = max - min;
		while (val < min) {
			val += range;
		}
		while (val > max) {
			val -= range;
		}
		return val;
	}








